#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('api:server');
//const http = require('http');
const https = require('https');
const fs = require('fs');

const KEY = fs.readFileSync(__dirname + '/security/cert.key');
const CERT = fs.readFileSync(__dirname + '/security/cert.pem');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = https.createServer({
  key: KEY,
  cert: CERT
}, app);
//const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Listening at https://localhost:${bind}`);
}


/**
 * WebSocket server init
 */
const jwt = require('./../utilities/jwt');
const FileManager = require('./../utilities/fileManager');
const WebSocket = require('ws');
const wss = new WebSocket.Server({
  server: server,
});

wss.on('listening', () => {
  console.log('WSS online');
})

wss.on('connection', (ws, req) => {
  let token = '';
  let lobby = [];
  let player = 0;
  let username = '';

  ws.on('message', (msg) => {
    parsedMessage = msg.split('|');
    let token = parsedMessage[0];
    if (!token) {
      ws.send('Unauthorized');
    } else {
      const verification = jwt.verifyToken(token);
      if (verification !== '') {
        username = token;
        ws.send('SERVER: Testing connection...');
      } else {
        ws.send('Unauthorized');
      }
    }

    FileManager.readGames().then((data, error) => {
      if (error) console.error(error);
      let gameID = parsedMessage[1];
      let game = '';
      data.forEach(el => {
        if (el.connectionWizard.gameInfo.id === gameID) {
          game = el;
        }
      });
      //Lobby vvv
      console.log(game);
      const { connectionWizard: { gameInfo: { players } } } = game;
      lobby = players;
      player = lobby.findIndex(el => el === username);
      console.log(`ClIENT (${lobby[player]}): ${parsedMessage[2]}`);
    })
  });
});

wss.on('close', (cli, req) => {
  //TODO close out the game, remove player etc.
})
